# -*- coding: utf-8 -*-


import eel
# бібліотека для веб інтерфейса


book1 = { # заповнюємо дані однієї книги
    "Назва": "Гаррі Поттер і філософський камень",
    "Жанри": ["Фантастика", "Роман"],
    "Вид видання": "Художня література",
    "Рік випуску": "1997",
    "Автори": ["Джоа́н Ро́улінг"],
    "Розміщення": "Друга шафа верхня полиця"
}

book2 = {
    "Назва": "Пригоди Тома Сойєра",
    "Жанри": ["Роман", "Фольклор", "Дитяча оітература"],
    "Вид видання": "Художня література",
    "Рік випуску": "1876",
    "Автори": ["Марк Твен"],
    "Розміщення": "Третя шафа середня полиця"
}

book3 = {
    "Назва": "Володар Перснів",
    "Жанри": ["Фентезі"],
    "Вид видання": "роман-трилогія",
    "Рік випуску": "1949",
    "Автори": ["Джон Ро́налд Ру́ел То́лкін"],
    "Розміщення": "Остання шафа нижня полиця"
}

book4 = {
    "Назва": "Книга Місяць війни. Хроніка подій. Промови та звернення Президента України Володимира Зеленського",
    "Жанри": ["Наука"],
    "Вид видання": "Офіційне видання",
    "Рік випуску": "2022",
    "Автори": ["Олександр Красовицький"],
    "Розміщення": "Середня шафа найвища полиця"
}


Library = [book1, book2, book3, book4] # додаємо усі книги у список (бібліотеку)


@eel.expose # Передавання функції у JavaScript
def getBooks(): # Функція яка дає імена усіх книг у бібліотеці

    values = "" # Змінна імен книш

    for book in range(len(Library)): # Проходимось по кожній книзі

        for key, value in Library[book].items(): # У цій книзі проходимось по усім даним

            if key == "Назва": # Якщо ключ книги назва

                values += f"{book}. {value}<br>" # Додаємо значення ключа і перенос рядку в HTML тегом BR

    return values # Повертаємо рядок із назвами
                

@eel.expose  # Передавання функції у JavaScript
# Функція яка додає книгу у бібліотеку
def addBook(name, ganre, kind, year, authors, placing):

    try: # 

        ganre = list(ganre.split(",")) # Якщо у книги пару жанрів 
        authors = list(authors.split(","))  # Якщо у книги пару авторів

        new_book = { # Додаємо дані книги
            "Назва": name, 
            "Жанри": ganre, 
            "Вид видання": kind,
            "Рік випуску": year, 
            "Автори": authors, 
            "Розміщення": placing 
        }

        Library.append(new_book) # Додаємо книгу у бібліотеку

        return "Книга додана до бібліотеки" # Повертаємо хороший результат

    except: # при помилці

        return "Помилка із введеням данних" # Повертаємо негативний результат


@eel.expose  # Передавання функції у JavaScript
# Функція для редагування книги за ім'ям
def editBook(name, ganre, kind, year, authors, placing):

    index_book = -1 # створюємо неможливий індекс

    for book in range(len(Library)): # проходимось по кожній книзі у бібліотеці

        for key, value in Library[book].items(): # получаємо усі дані книги ключі та значення почергово
        
            if key == "Назва" and value == name:  # якщо ключ це "Назва" і значення як введене ім'я

                index_book = book # Даємо індек книги у бібліотеці

    if index_book == -1: # Якщо індекс не змінився

        return f"Книги {name} незнайдено" # Повертаємо негативний результат

    else: # Якщо ж він змінився

        for key, value in Library[index_book].items(): # Проходимось по даним книги у бібліотеці

            if key == "Жанри": # Шукаємо ключі
                if ganre != "": # Якщо дані заповнені
                    ganre = list(ganre.split(",")) # Якщо пару жанрів
                    Library[index_book]["Жанри"] = ganre # Міняємо значення у словнику книги

            if key == "Вид видання":
                if kind != "":
                    Library[index_book]["Вид видання"] = kind

            if key == "Рік випуску":
                if year != "":
                    Library[index_book]["Рік випуску"] = year

            if key == "Автори":
                if authors != "":
                    authors = list(authors.split(","))
                    Library[index_book]["Автори"] = authors

            if key == "Розміщення":
                if placing != "":
                    Library[index_book]["Розміщення"] = placing

        return "Дані змінено" #


@eel.expose 
def searchBook(name): # Функція для пошуку книги

    index_book = -1 # Створюємо неможливий індекс

    for book in range(len(Library)): # Проходимось по бібліотеці

        for key, value in Library[book].items(): # Проходимось по кожній книзі

            if key == "Назва" and value == name:  # Якщо ключ є "Назва" і імя таке як введене

                index_book = book # Змінюємо індекс на положення книги у бібліотеці

    if index_book == -1: # Якщо індекс не змінився

        return f"Книги {name} незнайдено" # Повертаємо негативний результат

    else: # Якщо індекс змінився

        result = "" # Створюємо пустий рядок із даними

        for key, value in Library[index_book].items(): # Проходимось по книзу

            if type(value) == list: # Якщо є пару авторів або жанрів
                value1 = "" # Створємо для них новий рядок
                for i in value: # проходимось по списку авторів/жанрів
                    value1 += f"{i}, " # Додаємо їх у рядок через кому
                result += f"{key}: {value1}<br>" # і додаємо до загального результату
            else: # у іншому випадку
                result += f"{key}: {value}<br>" # просто одємо їх до загалього результату

        return result #


@eel.expose
def deleteBook(name): # Функція для видалення книги

    index_book = -1 # неможливий індекс

    for book in range(len(Library)): # проходимось по бібліотеці

        for key, value in Library[book].items():

            if key == "Назва" and value == name:

                index_book = book # знаходимо книгу 

    if index_book == -1: # Якщо не знайшли

        return f"Книги {name} незнайдено" # Повертаємо негативний результат

    else: # Якщо знайшли
        
        Library.pop(index_book) # Видаляємо книгу по індексі

        return f"Книгу видалено із бібліотеки" # повертаємо позитивний результат


if __name__ == "__main__": # Программа пчинає виконуватись із цього моменту

    eel.init("web") # Ініціалізуємо папку з веб інтерфейсом
    eel.start("main.html", size=(1500, 1000)) # додаємо файл HTML та задаємо розміри
